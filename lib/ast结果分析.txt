// 执行语句
dart lib/dart_ast.dart -f lib/test.dart
dart lib/dart_ast.dart -f example/lib/ast_page.dart

// 日志输出顺序
File path: lib/test.dart
visitCompilationUnit source:int increment(int a) {return a + 1;}
visitFunctionDeclaration source:int increment(int a) {return a + 1;}
visitSimpleIdentifier source:increment
_visitNode map: {type: Identifier, name: increment}
visitFunctionExpression source:(int a) {return a + 1;}
visitFormalParameterList source:(int a)
visitSimpleFormalParameter source:int a
visitTypeName source:int
_visitNode map: {type: TypeName, name: int}
_visitNodeList map: {type: SimpleFormalParameter, paramType: {type: TypeName, name: int}, name: a}
_visitNode map: {type: FormalParameterList, parameterList: [{type: SimpleFormalParameter, paramType: {type: TypeName, name: int}, name: a}]}
visitBlockFunctionBody source:{return a + 1;}
visitBlock source:{return a + 1;}
visitReturnStatement source:return a + 1;
visitBinaryExpression source:a + 1
visitSimpleIdentifier source:a
_visitNode map: {type: Identifier, name: a}
visitIntegerLiteral source:1
_visitNode map: {type: NumericLiteral, value: 1}
_visitNode map: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}
_visitNodeList map: {type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}
_visitNode map: {type: BlockStatement, body: [{type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}]}
_visitNode map: {type: BlockStatement, body: [{type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}]}
_visitNodeList map: {type: FunctionDeclaration, id: {type: Identifier, name: increment}, expression: {type: FunctionExpression, parameters: {type: FormalParameterList, parameterList: [{type: SimpleFormalParameter, paramType: {type: TypeName, name: int}, name: a}]}, body: {type: BlockStatement, body: [{type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}]}, isAsync: false}}

// ast解析顺序
visitCompilationUnit source:int increment(int a) {return a + 1;}
visitFunctionDeclaration source:int increment(int a) {return a + 1;}
visitSimpleIdentifier source:increment
visitFunctionExpression source:(int a) {return a + 1;}
visitFormalParameterList source:(int a)
visitSimpleFormalParameter source:int a
visitTypeName source:int
visitBlockFunctionBody source:{return a + 1;}
visitBlock source:{return a + 1;}
visitReturnStatement source:return a + 1;
visitBinaryExpression source:a + 1
visitSimpleIdentifier source:a
visitIntegerLiteral source:1

//
ast node: ImportDirectiveImpl-->import 'package:dart_ast/util/logger.dart';
ast node: SimpleStringLiteralImpl-->'package:dart_ast/util/logger.dart'
ast node: ImportDirectiveImpl-->import 'package:flutter/cupertino.dart';
ast node: SimpleStringLiteralImpl-->'package:flutter/cupertino.dart'
ast node: ImportDirectiveImpl-->import 'package:flutter/material.dart';
ast node: SimpleStringLiteralImpl-->'package:flutter/material.dart'
ast node: ClassDeclarationImpl-->class AstPage extends StatefulWidget {@override State<StatefulWidget> createState() => _AstPageState();}
ast node: CommentImpl-->
ast node: DeclaredSimpleIdentifier-->AstPage
ast node: ExtendsClauseImpl-->extends StatefulWidget
ast node: TypeNameImpl-->StatefulWidget
ast node: SimpleIdentifierImpl-->StatefulWidget
ast node: MethodDeclarationImpl-->@override State<StatefulWidget> createState() => _AstPageState();
ast node: AnnotationImpl-->@override
ast node: SimpleIdentifierImpl-->override
ast node: TypeNameImpl-->State<StatefulWidget>
ast node: SimpleIdentifierImpl-->State
ast node: TypeArgumentListImpl--><StatefulWidget>
ast node: TypeNameImpl-->StatefulWidget
ast node: SimpleIdentifierImpl-->StatefulWidget
ast node: DeclaredSimpleIdentifier-->createState
ast node: FormalParameterListImpl-->()
ast node: ExpressionFunctionBodyImpl-->=> _AstPageState();
ast node: MethodInvocationImpl-->_AstPageState()
ast node: SimpleIdentifierImpl-->_AstPageState
ast node: ArgumentListImpl-->()
ast node: ClassDeclarationImpl-->class _AstPageState extends State<AstPage> {@override Widget build(BuildContext context) {return Scaffold(appBar: AppBar(title: Text("AstPage")), body: Column(children: <Widget>[Text("1"), Text("2")]));}}
ast node: CommentImpl-->
ast node: DeclaredSimpleIdentifier-->_AstPageState
ast node: ExtendsClauseImpl-->extends State<AstPage>
ast node: TypeNameImpl-->State<AstPage>
ast node: SimpleIdentifierImpl-->State
ast node: TypeArgumentListImpl--><AstPage>
ast node: TypeNameImpl-->AstPage
ast node: SimpleIdentifierImpl-->AstPage
ast node: MethodDeclarationImpl-->@override Widget build(BuildContext context) {return Scaffold(appBar: AppBar(title: Text("AstPage")), body: Column(children: <Widget>[Text("1"), Text("2")]));}
ast node: AnnotationImpl-->@override
ast node: SimpleIdentifierImpl-->override
ast node: TypeNameImpl-->Widget
ast node: SimpleIdentifierImpl-->Widget
ast node: DeclaredSimpleIdentifier-->build
ast node: FormalParameterListImpl-->(BuildContext context)
ast node: SimpleFormalParameterImpl-->BuildContext context
ast node: TypeNameImpl-->BuildContext
ast node: SimpleIdentifierImpl-->BuildContext
ast node: DeclaredSimpleIdentifier-->context
ast node: BlockFunctionBodyImpl-->{return Scaffold(appBar: AppBar(title: Text("AstPage")), body: Column(children: <Widget>[Text("1"), Text("2")]));}
ast node: BlockImpl-->{return Scaffold(appBar: AppBar(title: Text("AstPage")), body: Column(children: <Widget>[Text("1"), Text("2")]));}
ast node: ReturnStatementImpl-->return Scaffold(appBar: AppBar(title: Text("AstPage")), body: Column(children: <Widget>[Text("1"), Text("2")]));
ast node: MethodInvocationImpl-->Scaffold(appBar: AppBar(title: Text("AstPage")), body: Column(children: <Widget>[Text("1"), Text("2")]))
ast node: SimpleIdentifierImpl-->Scaffold
ast node: ArgumentListImpl-->(appBar: AppBar(title: Text("AstPage")), body: Column(children: <Widget>[Text("1"), Text("2")]))
ast node: NamedExpressionImpl-->appBar: AppBar(title: Text("AstPage"))
ast node: LabelImpl-->appBar:
ast node: SimpleIdentifierImpl-->appBar
ast node: MethodInvocationImpl-->AppBar(title: Text("AstPage"))
ast node: SimpleIdentifierImpl-->AppBar
ast node: ArgumentListImpl-->(title: Text("AstPage"))
ast node: NamedExpressionImpl-->title: Text("AstPage")
ast node: LabelImpl-->title:
ast node: SimpleIdentifierImpl-->title
ast node: MethodInvocationImpl-->Text("AstPage")
ast node: SimpleIdentifierImpl-->Text
ast node: ArgumentListImpl-->("AstPage")
ast node: SimpleStringLiteralImpl-->"AstPage"
ast node: NamedExpressionImpl-->body: Column(children: <Widget>[Text("1"), Text("2")])
ast node: LabelImpl-->body:
ast node: SimpleIdentifierImpl-->body
ast node: MethodInvocationImpl-->Column(children: <Widget>[Text("1"), Text("2")])
ast node: SimpleIdentifierImpl-->Column
ast node: ArgumentListImpl-->(children: <Widget>[Text("1"), Text("2")])
ast node: NamedExpressionImpl-->children: <Widget>[Text("1"), Text("2")]
ast node: LabelImpl-->children:
ast node: SimpleIdentifierImpl-->children
ast node: ListLiteralImpl--><Widget>[Text("1"), Text("2")]
ast node: TypeArgumentListImpl--><Widget>
ast node: TypeNameImpl-->Widget
ast node: SimpleIdentifierImpl-->Widget
ast node: MethodInvocationImpl-->Text("1")
ast node: SimpleIdentifierImpl-->Text
ast node: ArgumentListImpl-->("1")
ast node: SimpleStringLiteralImpl-->"1"
ast node: MethodInvocationImpl-->Text("2")
ast node: SimpleIdentifierImpl-->Text
ast node: ArgumentListImpl-->("2")
ast node: SimpleStringLiteralImpl-->"2"
