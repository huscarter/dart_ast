// 执行语句
dart lib/dart_ast.dart -f lib/test.dart
dart lib/dart_ast.dart -f example/lib/test_page.dart
dart lib/dart_ast.dart -f example/lib/test_class.dart

// 日志输出顺序
File path: lib/test.dart
visitCompilationUnit source:int increment(int a) {return a + 1;}
visitFunctionDeclaration source:int increment(int a) {return a + 1;}
visitSimpleIdentifier source:increment
_visitNode map: {type: Identifier, name: increment}
visitFunctionExpression source:(int a) {return a + 1;}
visitFormalParameterList source:(int a)
visitSimpleFormalParameter source:int a
visitTypeName source:int
_visitNode map: {type: TypeName, name: int}
_visitNodeList map: {type: SimpleFormalParameter, paramType: {type: TypeName, name: int}, name: a}
_visitNode map: {type: FormalParameterList, parameterList: [{type: SimpleFormalParameter, paramType: {type: TypeName, name: int}, name: a}]}
visitBlockFunctionBody source:{return a + 1;}
visitBlock source:{return a + 1;}
visitReturnStatement source:return a + 1;
visitBinaryExpression source:a + 1
visitSimpleIdentifier source:a
_visitNode map: {type: Identifier, name: a}
visitIntegerLiteral source:1
_visitNode map: {type: NumericLiteral, value: 1}
_visitNode map: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}
_visitNodeList map: {type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}
_visitNode map: {type: BlockStatement, body: [{type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}]}
_visitNode map: {type: BlockStatement, body: [{type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}]}
_visitNodeList map: {type: FunctionDeclaration, id: {type: Identifier, name: increment}, expression: {type: FunctionExpression, parameters: {type: FormalParameterList, parameterList: [{type: SimpleFormalParameter, paramType: {type: TypeName, name: int}, name: a}]}, body: {type: BlockStatement, body: [{type: ReturnStatement, argument: {type: BinaryExpression, operator: +, left: {type: Identifier, name: a}, right: {type: NumericLiteral, value: 1}}}]}, isAsync: false}}

// ast解析顺序
visitCompilationUnit source:int increment(int a) {return a + 1;}
visitFunctionDeclaration source:int increment(int a) {return a + 1;}
visitSimpleIdentifier source:increment
visitFunctionExpression source:(int a) {return a + 1;}
visitFormalParameterList source:(int a)
visitSimpleFormalParameter source:int a
visitTypeName source:int
visitBlockFunctionBody source:{return a + 1;}
visitBlock source:{return a + 1;}
visitReturnStatement source:return a + 1;
visitBinaryExpression source:a + 1
visitSimpleIdentifier source:a
visitIntegerLiteral source:1


// for statement
st node: CommentImpl-->
ast node: DeclaredSimpleIdentifier-->TestClass
ast node: MethodDeclarationImpl-->int increase(int a) {int result = 0; for (int i = 0; i < 10; i++) {result = i + result;} return result;}
ast node: CommentImpl-->
ast node: TypeNameImpl-->int
ast node: SimpleIdentifierImpl-->int
ast node: DeclaredSimpleIdentifier-->increase
ast node: FormalParameterListImpl-->(int a)
ast node: SimpleFormalParameterImpl-->int a
ast node: TypeNameImpl-->int
ast node: SimpleIdentifierImpl-->int
ast node: DeclaredSimpleIdentifier-->a
ast node: BlockFunctionBodyImpl-->{int result = 0; for (int i = 0; i < 10; i++) {result = i + result;} return result;}
ast node: BlockImpl-->{int result = 0; for (int i = 0; i < 10; i++) {result = i + result;} return result;}
ast node: VariableDeclarationStatementImpl-->int result = 0;
ast node: VariableDeclarationListImpl-->int result = 0
ast node: TypeNameImpl-->int
ast node: SimpleIdentifierImpl-->int
ast node: VariableDeclarationImpl-->result = 0
ast node: DeclaredSimpleIdentifier-->result
ast node: IntegerLiteralImpl-->0
ast node: ForStatementImpl-->for (int i = 0; i < 10; i++) {result = i + result;}
ast node: ForPartsWithDeclarationsImpl-->int i = 0; i < 10; i++
ast node: VariableDeclarationListImpl-->int i = 0
ast node: TypeNameImpl-->int
ast node: SimpleIdentifierImpl-->int
ast node: VariableDeclarationImpl-->i = 0
ast node: DeclaredSimpleIdentifier-->i
ast node: IntegerLiteralImpl-->0
ast node: BinaryExpressionImpl-->i < 10
ast node: SimpleIdentifierImpl-->i
ast node: IntegerLiteralImpl-->10
ast node: PostfixExpressionImpl-->i++
ast node: SimpleIdentifierImpl-->i
ast node: BlockImpl-->{result = i + result;}
ast node: ExpressionStatementImpl-->result = i + result;
ast node: AssignmentExpressionImpl-->result = i + result
ast node: SimpleIdentifierImpl-->result
ast node: BinaryExpressionImpl-->i + result
ast node: SimpleIdentifierImpl-->i
ast node: SimpleIdentifierImpl-->result
ast node: ReturnStatementImpl-->return result;
ast node: SimpleIdentifierImpl-->result